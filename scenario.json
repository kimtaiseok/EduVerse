{
  "courseTitle": "LogiCore Tech 신입 개발자 과정",
  "weeks": [
    {
      "week": 1,
      "title": "첫 코드 작성과 데이터 저장",
      "cycles": [
        {
          "title": "첫 파이썬 프로그램 작성 (print)",
          "syntax_key": "print_statement",
          "filename": "hello.py",
          "starterCode": "# TODO: print() 함수를 사용하여 화면에 \"Welcome to LogiCore Tech!\"를 출력하세요.\n",
          "starterCode_adv": "# 아래 함수는 환영 메시지를 반환합니다.\n# TODO: 함수 본문에서 \"Welcome to LogiCore Tech!\" 문자열을 print() 함수로 출력하도록 수정하세요.\ndef print_welcome():\n    message = \"Welcome to LogiCore Tech!\"\n    # 여기에 코드를 작성하여 message 변수를 출력하세요.\n\n\n# 함수 호출 (이 부분은 수정하지 마세요)\nprint_welcome()\n",
          "testCode": "import io; from contextlib import redirect_stdout; f = io.StringIO(); with redirect_stdout(f): source_code = student_code; exec(source_code); output = f.getvalue().strip(); expected = 'Welcome to LogiCore Tech!'; assert output == expected, f\"출력된 메시지가 요청과 다릅니다. 기대값: '{expected}', 실제 출력값: '{output}'\"",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "환영 메시지 출력 함수 완성",
            "content": "{{USERNAME}}님, 개발자로서의 첫 임무는 간단합니다. 화면에 <span class='font-bold text-yellow-300'>\"Welcome to LogiCore Tech!\"</span> 라는 환영 메시지를 출력하는 파이썬 코드를 작성해주세요. 개발 환경은 이미 준비되어 있습니다."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "환영 메시지 출력 함수 완성",
            "content": "{{USERNAME}}님, 첫 업무로, 이미 작성된 `print_welcome` 함수가 <span class='font-bold text-yellow-300'>\"Welcome to LogiCore Tech!\"</span> 메시지를 화면에 출력하도록 완성해주세요. 함수 구조는 이미 잡혀있으니, 핵심 출력 부분만 구현하면 됩니다."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 힌트",
            "title": "첫 코드, 시작해볼까요?",
            "content": "세나 선임이에요! 반갑습니다. 화면에 글자를 출력하는 건 아주 기본이에요. 파이썬에서는 <span class='font-bold text-teal-300'>`print()` 함수</span>를 사용하죠. 괄호 안에 <span class='font-bold text-teal-300'>따옴표로 감싼 문자열</span>을 넣으면 된답니다. 한번 해보세요!"
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "함수 안에서 출력하기",
            "content": "함수 안에서 값을 화면에 보여줄 때도 똑같이 <span class='font-bold text-teal-300'>`print()` 함수</span>를 쓰면 돼요. 이미 `message` 변수에 원하는 문자열이 들어있으니, 그 변수를 `print()` 함수에 넘겨주기만 하면 되겠네요!"
          },
          "lecture": {
            "character": "profKim",
            "title": "강의 노트: print() 함수와 문자열",
            "keyTakeaway": "`print()` 함수는 괄호 안의 내용을 화면에 보여주는 가장 기본적인 명령입니다.",
            "sandboxCode": "print(\"파이썬, 반가워!\")",
            "sections": [
              {
                "heading": "핵심 개념",
                "text": "프로그램은 컴퓨터에 내리는 '명령문'들의 순차적인 나열입니다. `print()`는 파이썬이 기본으로 제공하는 '함수'이며, 괄호 안에 주어진 값을 화면(터미널)에 출력하라는 명령을 수행합니다.",
                "code": null
              },
              {
                "heading": "기본 문법",
                "text": "따옴표 안에 출력하고 싶은 문장을 넣어 함수를 호출합니다.",
                "code": "# 큰따옴표 사용\nprint(\"Hello, World!\")\n\n# 작은따옴표도 가능\nprint('Hello, Python!')"
              },
              {
                "heading": "활용 사례",
                "text": "프로그램의 실행 상태를 확인하거나, 사용자에게 메시지를 보여주거나, 계산 결과를 출력하는 등 가장 기본적이고 중요한 기능입니다.",
                "code": null
              },
              {
                "heading": "주의점 및 팁",
                "text": "문자열은 반드시 작은따옴표('')나 큰따옴표(\"\")로 감싸야 합니다. 또한, 파이썬은 대소문자를 구분하므로 `Print()`가 아닌 `print()`로 정확하게 입력해야 합니다.",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "첫 코드 실행 성공!",
              "content": "환영 메시지가 정확하게 출력되었군요. <span class='font-bold text-green-300'>첫 파이썬 코드 실행을 성공적으로 마쳤습니다.</span> 좋습니다! LogiCore Tech에서의 여정을 시작한 것을 축하합니다."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "메시지가 조금 다른데요?",
              "content": "앗, 출력된 메시지가 조금 다르네요. 오탈자가 없는지, 대소문자는 정확한지, 느낌표까지 똑같은지 다시 한번 꼼꼼하게 확인해볼까요?"
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "앗, 문법 오류!",
              "content": "어이쿠, 코드를 실행하다가 오류가 발생했어요. 혹시 `print`를 `Print`로 잘못 쓰시진 않았나요? 아니면 문자열 양쪽에 따옴표를 빠뜨렸을 수도 있고요. 파이썬은 이런 사소한 실수에 민감하거든요. 오류 메시지를 천천히 읽어보시면 어디가 틀렸는지 힌트를 얻을 수 있을 거예요."
            }
          }
        },
        {
          "title": "코드 설명 남기기 (주석)",
          "syntax_key": "comments",
          "filename": "welcome_commented.py",
          "starterCode": "# TODO: 1. 첫 줄에 이 파일이 환영 메시지를 출력하는 스크립트임을 설명하는 주석을 작성하세요.\n\n# TODO: 2. 아래 print 함수가 환영 메시지를 출력하는 코드임을 설명하는 주석을 바로 윗 줄에 작성하세요.\nprint(\"Welcome again!\")\n",
          "starterCode_adv": "# TODO: 아래 함수 정의 바로 위에, 이 함수가 무엇을 하는 함수인지 설명하는 한 줄 주석을 추가하세요.\ndef greet(name):\n    # TODO: 아래 print문 바로 위에, 어떤 내용을 출력하는지 설명하는 주석을 추가하세요.\n    print(f\"{name}님, 다시 오신 것을 환영합니다!\")\n\n# 함수 호출 (수정 불필요)\ngreet(\"김선임\")\n",
          "testCode": "lines = source_code.strip().split('\\n'); assert lines[0].strip().startswith('#') or (len(lines) > 2 and lines[1].strip().startswith('#')), '파일 시작 부분 또는 함수 정의 위에 주석이 필요합니다.'; greet_index = -1; for i, line in enumerate(lines): if 'def greet(' in line: greet_index = i; break; print_index = -1; for i, line in enumerate(lines): if 'print(f\"' in line: print_index = i; break; assert greet_index != -1 and print_index != -1 and lines[print_index-1].strip().startswith('#'), 'print문 바로 위에 주석이 필요합니다.'",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "코드 가독성 높이기",
            "content": "다른 개발자나 미래의 내가 코드를 쉽게 이해하려면 설명을 덧붙이는 것이 중요합니다. 방금 작성한 코드에 <span class='font-bold text-yellow-300'>'주석(Comment)'</span>을 추가하여, 해당 코드가 어떤 역할을 하는지 설명을 남겨주세요."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "함수 설명 추가",
            "content": "코드 가독성을 위해 주석은 필수입니다. 제공된 `greet` 함수 코드에 <span class='font-bold text-yellow-300'>함수의 역할</span>과 <span class='font-bold text-yellow-300'>print문의 기능</span>을 설명하는 주석을 각각 적절한 위치에 추가해주세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "코드에 메모 남기기",
            "content": "주석은 코드에 남기는 메모 같은 거예요. 코드 실행에는 영향을 주지 않으면서 설명을 추가할 수 있죠. 파이썬에서는 <span class='font-bold text-teal-300'>`#` 기호 뒤에 오는 모든 내용</span>이 주석으로 처리돼요. 이 파일이 무슨 파일인지, 이 코드가 무슨 역할을 하는지 간단하게 메모를 남겨보세요!"
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "주석은 어디에?",
            "content": "함수나 중요한 코드 블록 바로 윗줄에 <span class='font-bold text-teal-300'>`#` 기호</span>를 사용해서 이게 어떤 기능을 하는지 설명해주는 게 일반적이에요. 복잡한 계산식이나 로직이 있다면 그 줄 끝에 간단한 설명을 덧붙이기도 하고요. 어디에 쓰는 게 다른 사람이 이해하기 쉬울지 생각해보세요!"
          },
          "lecture": {
            "character": "profKim",
            "title": "강의 노트: 주석 (Comment)",
            "keyTakeaway": "주석은 `#` 기호로 시작하며, 코드의 가독성을 높이고 설명을 추가하는 데 사용됩니다.",
            "sandboxCode": "# 이 줄은 주석입니다. 아래 코드는 5를 출력합니다.\nprint(5)",
            "sections": [
              {
                "heading": "핵심 개념",
                "text": "주석은 프로그램 코드 내에 포함되지만, 파이썬 인터프리터가 실행하지 않고 무시하는 설명문입니다. 코드를 읽는 사람의 이해를 돕기 위해 사용됩니다.",
                "code": null
              },
              {
                "heading": "기본 문법",
                "text": "`#` 기호를 사용하면 그 줄의 `#` 이후 모든 내용이 주석 처리됩니다.",
                "code": "# 이것은 한 줄 전체 주석입니다.\n\nprint(\"Hello\") # 이것은 코드 뒤에 붙는 주석입니다."
              },
              {
                "heading": "활용 사례",
                "text": "복잡한 로직 설명, 코드 작성 의도 명시, 임시로 코드 비활성화 등 다양한 목적으로 사용됩니다.",
                "code": null
              },
              {
                "heading": "주의점 및 팁",
                "text": "주석은 코드가 '어떻게' 동작하는지보다 '왜' 그렇게 작성되었는지를 설명하는 데 집중하는 것이 좋습니다. 너무 당연한 내용의 주석은 오히려 가독성을 해칠 수 있습니다.",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "가독성 향상",
              "content": "<span class='font-bold text-green-300'>주석을 적절하게 잘 추가했군요.</span> 이제 코드를 이해하기 훨씬 수월해졌습니다. 좋은 습관입니다. 다음 단계로 넘어가죠."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "주석 위치를 확인해볼까요?",
              "content": "주석은 추가했는데, 위치가 조금 다른 것 같아요. 첫 줄이나 함수 정의 위에 파일 설명 주석이 있는지, 그리고 `print`문 바로 윗줄에 코드 설명 주석이 있는지 다시 확인해주세요."
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "앗, 주석 처리 오류!",
              "content": "코드를 실행하다가 오류가 발생했어요. 혹시 주석을 시작할 때 `#` 기호를 빠뜨린 건 아닐까요? `#` 기호가 없으면 파이썬은 그 줄을 코드로 인식하려고 해서 오류가 날 수 있어요."
            }
          }
        },
        {
          "title": "데이터 저장하기 (변수와 자료형)",
          "syntax_key": "variables_datatypes",
          "filename": "server_status.py",
          "starterCode": "# TODO: 아래 주석에 맞춰 서비스의 기본 정보를 변수에 저장해주세요.\n\n# 1. 서비스 이름(service_name)을 \"LogiCore\" 라는 문자열로 저장하세요.\n\n# 2. 현재 동시 접속자 수(concurrent_users)를 100 이라는 숫자로 저장하세요.\n\n# 3. 서비스 오픈 여부(is_active)를 True 라는 불리언 값으로 저장하세요.\n",
          "starterCode_adv": "# 아래 함수는 서버 상태 정보를 딕셔너리로 반환합니다.\n# TODO: 함수 내부에 service_name, concurrent_users, is_active 변수를\n#       각각 \"LogiCore\", 100, True 값으로 정의하고,\n#       이 변수들을 사용하여 딕셔너리를 완성하세요.\ndef get_server_status():\n    # 여기에 변수들을 정의하세요.\n    service_name = \"\"\n    concurrent_users = 0\n    is_active = False\n    \n    status_info = {\n        \"name\": service_name,\n        \"users\": concurrent_users,\n        \"active\": is_active\n    }\n    return status_info\n\n# 함수 호출 및 결과 확인 (수정 불필요)\nserver_info = get_server_status()\nprint(server_info)\n",
          "testCode": "# Check if the function exists (for advanced path)\nif 'get_server_status' in locals() and callable(get_server_status):\n    try:\n        status = get_server_status()\n        assert isinstance(status, dict), \"get_server_status 함수는 딕셔너리를 반환해야 합니다.\"\n        assert status.get('name') == 'LogiCore', \"딕셔너리의 'name' 값이 'LogiCore'여야 합니다.\"\n        assert status.get('users') == 100, \"딕셔너리의 'users' 값이 100이어야 합니다.\"\n        assert status.get('active') is True, \"딕셔너리의 'active' 값이 True여야 합니다.\"\n    except Exception as e:\n        assert False, f\"get_server_status 함수 실행 중 오류 발생: {e}\"\n# Check global variables (for beginner path)\nelse:\n    assert 'service_name' in locals() and service_name == 'LogiCore', \"service_name 변수에 'LogiCore' 문자열을 할당해야 합니다.\"\n    assert 'concurrent_users' in locals() and concurrent_users == 100, \"concurrent_users 변수에 숫자 100을 할당해야 합니다.\"\n    assert 'is_active' in locals() and is_active is True, \"is_active 변수에 불리언 값 True를 할당해야 합니다.\"",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "서비스 기본 정보 설정",
            "content": "좋은 아침입니다, OOO님. 간단한 업무부터 시작하죠. 우리 서비스의 <span class='font-bold text-yellow-300'>운영 상태를 관리할 변수</span>가 필요합니다. 서비스 이름(`service_name`)과 현재 동시 접속자 수(`concurrent_users`), 그리고 서비스 오픈 여부(`is_active`)를 각각 <span class='font-bold text-yellow-300'>문자열, 숫자, 불리언(True/False) 값</span>으로 변수에 저장해주세요."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "서버 상태 정보 함수 완성",
            "content": "서버 상태 정보를 반환하는 함수 `get_server_status`가 있습니다. 함수 내부에 <span class='font-bold text-yellow-300'>서비스 이름('LogiCore'), 동시 접속자 수(100), 오픈 여부(True)</span>를 각각 적절한 변수에 저장하고, 이 변수들을 사용하여 반환될 딕셔너리를 완성해주세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 OJT",
            "title": "데이터를 담는 상자, 변수",
            "content": "세나 선임이에요. 변수는 일종의 <span class='font-bold text-teal-300'>'이름표가 붙은 상자'</span>라고 생각하면 편해요. 상자에 물건을 넣듯, 변수에 데이터를 저장하는 거죠. 파이썬은 똑똑해서 상자에 <span class='font-bold text-teal-300'>숫자를 넣으면 숫자 상자</span>로, <span class='font-bold text-teal-300'>글자를 넣으면 글자 상자</span>로 알아서 인식한답니다. 이걸 '동적 타이핑'이라고 불러요."
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "함수 안에서의 변수 사용",
            "content": "함수 안에서도 변수를 만드는 건 똑같아요. `=` 기호를 써서 <span class='font-bold text-teal-300'>변수 이름에 값을 저장</span>하면 되죠. 문자열은 따옴표, 숫자는 그냥 쓰고, 참/거짓은 `True`나 `False`로 쓰는 것만 기억하면 돼요. 이렇게 만든 변수들을 딕셔너리에 넣어서 반환하는 구조네요!"
          },
          "lecture": {
            "character": "profKim",
            "title": "강의 노트: 변수와 자료형",
            "keyTakeaway": "변수는 값을 저장하는 공간이며, `=` 기호를 사용해 값을 할당(저장)합니다.",
            "sandboxCode": "# my_age 변수에 자신의 나이를 숫자로 저장하고 출력해보세요.\nmy_age = 25\nprint(my_age)",
            "sections": [
              {
                "heading": "핵심 개념",
                "text": "변수(Variable)는 데이터를 저장하기 위해 이름표를 붙인 메모리 공간입니다. 파이썬에서는 변수를 만들기 전에 미리 타입을 선언할 필요가 없습니다. 값을 할당하면 그 값의 종류에 따라 자동으로 자료형(Data Type)이 결정됩니다.",
                "code": null
              },
              {
                "heading": "기본 문법",
                "text": "변수이름 = 값 형태로 값을 할당합니다.",
                "code": "# 숫자형 (Integer)\nuser_count = 100\n\n# 문자열 (String)\nserver_status = \"running\"\n\n# 불리언 (Boolean)\nis_admin = True"
              },
              {
                "heading": "활용 사례",
                "text": "사용자 이름, 나이, 점수 등 프로그램이 동작하는 동안 계속해서 사용되거나 변경될 수 있는 모든 데이터를 저장하는 데 사용됩니다.",
                "code": null
              },
              {
                "heading": "주의점 및 팁",
                "text": "변수 이름은 숫자로 시작할 수 없으며, 공백을 포함할 수 없습니다. 또한, `my_name`과 `My_Name`은 서로 다른 변수로 인식될 만큼 대소문자를 엄격하게 구분합니다.",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "기본 설정 완료",
              "content": "<span class='font-bold text-green-300'>변수들이 정확하게 선언되었군요.</span> 좋습니다. 이제 이 변수들을 이용해 우리 서비스가 다양한 상황에 맞게 동작하도록 만들 수 있습니다. 다음 업무로 넘어가죠."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "선언을 다시 확인해볼까요?",
              "content": "음, 테스트를 통과하지 못했어요. 메시지를 보니 변수 이름에 오타가 있거나, 저장된 값의 종류(자료형)가 다른 것 같아요. 문자열은 따옴표로 감쌌는지, 숫자는 그냥 썼는지, 불리언은 `True` (대문자 T)로 썼는지 한번 확인해볼까요?"
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "앗, 문법 오류!",
              "content": "코드를 실행하다가 오류가 발생했어요. 변수 이름 규칙을 어긴 건 아닐까요? 변수 이름은 숫자로 시작할 수 없고, `my-name`처럼 특수문자를 쓸 수 없어요. 변수 이름을 다시 한번 확인해주세요!"
            }
          }
        }
      ]
    },
    {
      "week": 2,
      "title": "데이터 가공하기: 연산자와 문자열",
      "cycles": [
        {
          "title": "숫자 계산하기 (연산자)",
          "syntax_key": "operators",
          "filename": "analysis.py",
          "starterCode": "total_visits = 1250\npaid_users = 50\n\n# TODO: total_visits와 paid_users를 사용하여 conversion_rate를 계산하세요.\n# 전환율 공식: (유료 전환 사용자 / 총 방문자 수) * 100\n\nconversion_rate = 0 # 이 부분을 수정하여 계산식을 작성하세요.\n\n# TODO: print() 함수를 사용하여 conversion_rate의 값을 출력하세요.\n\n",
          "starterCode_adv": "# 아래 함수는 방문자 수와 유료 사용자 수를 받아 전환율을 계산하여 반환합니다.\n# TODO: 함수 본문에서 전환율 계산 로직을 완성하세요.\n# 전환율 공식: (유료 사용자 / 총 방문자 수) * 100\ndef calculate_conversion_rate(total_visits, paid_users):\n    rate = 0\n    # 여기에 계산식을 작성하여 rate 변수에 저장하세요.\n    \n    return rate\n\n# 함수 호출 및 결과 확인 (수정 불필요)\nconversion_rate = calculate_conversion_rate(1250, 50)\nprint(conversion_rate)\n",
          "testCode": "assert 'conversion_rate' in locals(), \"'conversion_rate' 변수가 선언되지 않았습니다.\"; assert abs(conversion_rate - 4.0) < 0.001, f\"계산된 전환율이 4.0이 아닙니다. 실제 계산값: {conversion_rate}\"; import io; from contextlib import redirect_stdout; f = io.StringIO(); with redirect_stdout(f): source_code = student_code; exec(source_code); output = f.getvalue().strip(); assert abs(float(output) - 4.0) < 0.001, 'conversion_rate의 값이 올바르게 출력되지 않았습니다.'",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "사용자 데이터 분석",
            "content": "기획팀에서 간단한 데이터 분석을 요청했습니다. 어제 하루 동안의 <span class='font-bold text-yellow-300'>총 방문자 수(total_visits)가 1,250명</span>이고, <span class='font-bold text-yellow-300'>유료 전환 사용자(paid_users)가 50명</span>일 때, '유료 전환율(conversion_rate)'이 몇 퍼센트인지 계산해서 출력해주세요."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "전환율 계산 함수 완성",
            "content": "전환율을 계산하는 함수 `calculate_conversion_rate`가 있습니다. 함수 내부의 계산 로직을 완성하여, <span class='font-bold text-yellow-300'>총 방문자 수와 유료 사용자 수를 바탕으로 정확한 전환율(%)을 계산</span>하고 반환하도록 수정해주세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "계산은 컴퓨터에게!",
            "content": "간단한 계산이네요. (유료 전환 사용자 / 총 방문자 수) * 100 으로 구하면 되겠죠? 파이썬에서는 사칙연산을 위한 <span class='font-bold text-teal-300'>산술 연산자(`+`, `-`, `*`, `/`)</span>를 바로 사용할 수 있어요. 코드로 계산식을 그대로 옮겨보면 금방 해결될 거예요."
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "함수 안에서의 계산",
            "content": "함수 안에서 계산하는 것도 똑같아요! 매개변수로 넘어온 `total_visits`와 `paid_users` 변수를 사용해서 <span class='font-bold text-teal-300'>산술 연산자(`*`, `/`)</span>로 계산식을 만들고, 그 결과를 `rate` 변수에 저장하면 돼요. 괄호를 써서 계산 순서를 명확히 하는 것도 좋고요!"
          },
          "lecture": {
            "character": "profKim",
            "title": "강의 노트: 연산자와 수식",
            "keyTakeaway": "연산자는 값을 계산하고 비교하는 데 사용되며, 괄호로 계산 순서를 제어할 수 있습니다.",
            "sandboxCode": "my_score = 85\npass_score = 60\n\n# my_score가 pass_score보다 높은지 확인해보세요.\nprint(my_score > pass_score)",
            "sections": [
              {
                "heading": "핵심 개념",
                "text": "연산자(Operator)는 덧셈, 뺄셈, 비교 등 특정 연산을 수행하는 기호입니다. 연산자와 값이 결합하여 만들어지는 하나의 식을 수식(Expression)이라고 합니다. 수식은 계산되어 하나의 결과값을 만들어냅니다.",
                "code": null
              },
              {
                "heading": "기본 문법",
                "text": "다양한 연산자를 사용하여 수식을 만들 수 있습니다.",
                "code": "# 산술 연산자\nresult = 10 + 5   # 15\nresult = 10 / 2   # 5.0\n\n# 비교 연산자 (결과는 True 또는 False)\nis_equal = (10 == 5) # False\nis_greater = (10 > 5)  # True"
              },
              {
                "heading": "활용 사례",
                "text": "점수 합계 계산, 상품 가격 비교, 사용자 입력값 검증 등 데이터에 기반한 모든 판단과 계산에 사용됩니다.",
                "code": null
              },
              {
                "heading": "주의점 및 팁",
                "text": "곱셈/나눗셈(`*`, `/`)이 덧셈/뺄셈(`+`, `-`)보다 먼저 계산됩니다. 계산 순서가 헷갈릴 때는, 괄호 `()`를 사용하여 명확하게 순서를 지정해주는 것이 좋은 습관입니다. 예: `(a + b) / 2`",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "분석 결과 확인",
              "content": "<span class='font-bold text-green-300'>전환율 계산이 정확하네요.</span> 좋습니다. 이런 간단한 계산 자동화가 개발의 시작입니다. 이제 이 결과를 보고서 형태로 보기 좋게 만드는 작업을 해보죠."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "계산 결과를 다시 확인해볼까요?",
              "content": "어라, 계산 결과가 약간 다른 것 같아요. 혹시 수식에 오타가 있거나, 변수 이름을 잘못 쓴 건 아닐까요? 아니면 나눗셈 순서가 바뀌었을 수도 있고요. 수식을 다시 한번 천천히 살펴봐 주세요."
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "앗, 계산 중 오류!",
              "content": "코드를 실행하다가 오류가 발생했어요. 혹시 숫자가 아닌 값으로 계산을 시도했거나, 존재하지 않는 변수를 사용한 건 아닐까요? 변수 이름에 오타는 없는지 꼼꼼히 확인해보세요."
            }
          }
        },
        {
          "title": "문자열 조합하기 (포맷팅)",
          "syntax_key": "string_formatting",
          "filename": "report.py",
          "starterCode": "report_date = '2025-09-29'\nconversion_rate = 4.0\n\n# TODO: f-string을 사용하여 \"[날짜] 기준, 유료 전환율은 [전환율]% 입니다.\" 형식의 문자열을 만들어 'report_message' 변수에 저장하세요.\n# 예: \"2025-09-29 기준, 유료 전환율은 4.0% 입니다.\"\n\nreport_message = \"\"\n\n# TODO: print() 함수를 사용하여 report_message 변수의 값을 출력하세요.\n\n",
          "starterCode_adv": "# 아래 함수는 날짜와 전환율을 받아 보고서 문자열을 생성하여 반환합니다.\n# TODO: 함수 본문에서 f-string을 사용하여 지정된 형식의 보고서 문자열을 만들고 반환하세요.\n# 형식: \"[날짜] 기준, 유료 전환율은 [전환율]% 입니다.\"\ndef create_report_message(date_str, rate_float):\n    message = \"\"\n    # 여기에 f-string을 사용하여 message 변수에 문자열을 저장하세요.\n    \n    return message\n\n# 함수 호출 및 결과 확인 (수정 불필요)\nreport_message = create_report_message('2025-09-29', 4.0)\nprint(report_message)\n",
          "testCode": "expected_output = f\"{report_date} 기준, 유료 전환율은 {conversion_rate}% 입니다.\"; assert 'report_message' in locals(), \"'report_message' 변수를 선언해야 합니다.\"; assert report_message == expected_output, f\"report_message 변수의 값이 기대와 다릅니다. 기대값: '{expected_output}', 실제값: '{report_message}'\"; import io; from contextlib import redirect_stdout; f = io.StringIO(); with redirect_stdout(f): source_code = student_code; exec(source_code); output = f.getvalue().strip(); assert output == expected_output, 'report_message의 값이 올바르게 출력되지 않았습니다.'",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "동적 보고 메시지 생성",
            "content": "방금 계산한 <span class='font-bold text-yellow-300'>유료 전환율 결과를 보고 메시지로 만드는 업무</span>입니다. `report_date` 변수(예: '2025-09-29')와 `conversion_rate` 변수의 값을 조합해서, <span class='font-bold text-yellow-300'>\"[날짜] 기준, 유료 전환율은 [전환율]% 입니다.\"</span> 와 같은 최종 문자열을 만들어 출력해주세요."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "보고서 메시지 생성 함수 완성",
            "content": "보고서 메시지를 생성하는 `create_report_message` 함수가 있습니다. 함수 내부 로직을 완성하여, <span class='font-bold text-yellow-300'>날짜 문자열과 전환율 숫자를 받아 지정된 형식의 보고서 문자열을 반환</span>하도록 수정해주세요."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "f-string을 써보세요!",
            "content": "여러 변수를 합쳐서 하나의 문장을 만들 때, `+` 기호로 계속 이어 붙이는 건 좀 옛날 방식이에요. <span class='font-bold text-teal-300'>f-string</span>을 써보세요. 문자열 앞에 `f`를 붙이고, 문자열 안에 `{변수이름}`을 넣으면 알아서 값이 쏙 들어가요. 코드가 훨씬 깔끔해져서 저도 애용하는 기능이랍니다!"
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "함수 안에서 f-string 활용!",
            "content": "함수 안에서도 <span class='font-bold text-teal-300'>f-string</span>을 똑같이 쓸 수 있어요! 매개변수로 받은 `date_str`과 `rate_float` 변수를 문자열 안에 `{}` 중괄호로 넣어서 조합하면 끝이에요. 참 쉽죠?"
          },
          "lecture": {
            "character": "profKim",
            "title": "강의 노트: 문자열 포맷팅",
            "keyTakeaway": "f-string은 `f\"...{변수}...\"` 형태로, 변수 값을 문자열에 삽입하는 가장 현대적이고 편리한 방법입니다.",
            "sandboxCode": "item = \"커피\"\nprice = 5000\n\n# f-string을 이용해 \"상품: 커피, 가격: 5000원\"을 출력해보세요.\nprint(f\"상품: {item}, 가격: {price}원\")",
            "sections": [
              {
                "heading": "핵심 개념",
                "text": "문자열 포맷팅(String Formatting)은 문자열의 특정 위치에 변수의 값을 삽입하여, 동적인 문자열을 생성하는 기법입니다. 이를 통해 형식화된 보고서, 알림 메시지 등을 쉽게 만들 수 있습니다.",
                "code": null
              },
              {
                "heading": "기본 문법",
                "text": "문자열 시작 따옴표 앞에 `f`를 붙이고, 삽입할 변수나 값을 중괄호 `{}`로 감싸줍니다.",
                "code": "# f-string (가장 추천하는 방식)\nname = \"Sena\"\nage = 30\nmessage = f\"안녕하세요, 제 이름은 {name}이고, 나이는 {age}살 입니다.\""
              },
              {
                "heading": "활용 사례",
                "text": "로그 메시지 기록, 사용자에게 보내는 이메일 내용 생성, 데이터베이스 쿼리 문자열 생성 등 변수와 문자열을 조합해야 하는 모든 상황에 사용됩니다.",
                "code": null
              },
              {
                "heading": "주의점 및 팁",
                "text": "f-string을 사용할 때, 문자열 시작 따옴표 앞에 `f`를 빠뜨리지 않도록 주의하세요. 중괄호 `{}` 안에는 변수뿐만 아니라 ` {age + 1} `과 같은 간단한 계산식도 넣을 수 있습니다.",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "보고서 형식 완성",
              "content": "<span class='font-bold text-green-300'>메시지가 아주 깔끔하게 출력되는군요.</span> f-string을 잘 활용했네요. 데이터를 다루는 기본기를 모두 익혔으니, 다음 주차에는 더 복잡한 로직을 다뤄보겠습니다. 수고했어요."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "메시지 형식이 조금 달라요",
              "content": "음, 만들어진 메시지가 요청한 형식과 조금 다르네요. 띄어쓰기나 `%` 같은 특수문자, 마침표까지 정확하게 일치해야 해요. 중괄호 안에 변수 이름은 제대로 들어갔는지도 한번 확인해볼까요?"
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "문제 해결 지원",
              "title": "앗, 문법 오류!",
              "content": "코드를 실행하다가 오류가 발생했어요. f-string을 사용할 때 가장 흔한 실수는 문자열 앞에 `f`를 빠뜨리는 거예요. 혹시 잊으신 건 아닐까요? 아니면 중괄호 `{}`를 빠뜨렸거나, 변수 이름에 오타가 있을 수도 있어요!"
            }
          }
        },
        {
          "title": "미니 프로젝트: 간단한 계산기 만들기",
          "syntax_key": "project_integration",
          "filename": "calculator.py",
          "starterCode": "# TODO: 1. 'num1' 변수에 숫자 10을 저장하세요.\n\n\n# TODO: 2. 'num2' 변수에 숫자 5를 저장하세요.\n\n\n# TODO: 3. 두 변수를 더한 결과를 'add_result' 변수에 저장하세요.\n\n\n# TODO: 4. 두 변수를 뺀 결과를 'sub_result' 변수에 저장하세요.\n\n\n# TODO: 5. 두 변수를 곱한 결과를 'mul_result' 변수에 저장하세요.\n\n\n# TODO: 6. 두 변수를 나눈 결과를 'div_result' 변수에 저장하세요.\n\n\n# TODO: 7. print() 함수와 f-string을 사용하여 결과를 아래 형식으로 출력하세요.\n# 형식:\n# 덧셈 결과: [add_result]\n# 뺄셈 결과: [sub_result]\n# 곱셈 결과: [mul_result]\n# 나눗셈 결과: [div_result]\n\n",
          "starterCode_adv": "# 아래 4개의 함수는 각각 두 숫자를 받아 덧셈, 뺄셈, 곱셈, 나눗셈 결과를 반환합니다.\n# TODO: 각 함수의 본문을 완성하여 올바른 계산 결과를 반환하도록 수정하세요.\ndef add(a, b):\n    return 0 # 수정 필요\n\ndef subtract(a, b):\n    return 0 # 수정 필요\n\ndef multiply(a, b):\n    return 0 # 수정 필요\n\ndef divide(a, b):\n    return 0 # 수정 필요\n\n# 함수 호출 및 결과 출력 (수정 불필요)\nnum1 = 10\nnum2 = 5\nadd_result = add(num1, num2)\nsub_result = subtract(num1, num2)\nmul_result = multiply(num1, num2)\ndiv_result = divide(num1, num2)\n\nprint(f\"덧셈 결과: {add_result}\")\nprint(f\"뺄셈 결과: {sub_result}\")\nprint(f\"곱셈 결과: {mul_result}\")\nprint(f\"나눗셈 결과: {div_result}\")\n",
          "testCode": "assert 'num1' in locals() and num1 == 10, 'num1 변수 값이 올바르지 않습니다.'; assert 'num2' in locals() and num2 == 5, 'num2 변수 값이 올바르지 않습니다.'; assert 'add_result' in locals() and add_result == 15, f'덧셈 결과가 올바르지 않습니다. 기대값: 15, 실제값: {locals().get(\"add_result\")}'; assert 'sub_result' in locals() and sub_result == 5, f'뺄셈 결과가 올바르지 않습니다. 기대값: 5, 실제값: {locals().get(\"sub_result\")}'; assert 'mul_result' in locals() and mul_result == 50, f'곱셈 결과가 올바르지 않습니다. 기대값: 50, 실제값: {locals().get(\"mul_result\")}'; assert 'div_result' in locals() and div_result == 2.0, f'나눗셈 결과가 올바르지 않습니다. 기대값: 2.0, 실제값: {locals().get(\"div_result\")}'; import io; from contextlib import redirect_stdout; f = io.StringIO(); with redirect_stdout(f): source_code = student_code; exec(source_code); output = f.getvalue().strip().split('\\n'); expected_lines = [f'덧셈 결과: {add_result}', f'뺄셈 결과: {sub_result}', f'곱셈 결과: {mul_result}', f'나눗셈 결과: {div_result}']; assert len(output) == 4, '4줄의 결과가 출력되어야 합니다.'; assert all(out == exp for out, exp in zip(output, expected_lines)), f'출력 형식이 올바르지 않습니다.\\n기대값:\\n{chr(10).join(expected_lines)}\\n실제값:\\n{chr(10).join(output)}'",
          "task": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "미니 프로젝트: 계산 자동화",
            "content": "이번 주 배운 내용을 종합하여 간단한 계산기 스크립트를 만들어봅시다. <span class='font-bold text-yellow-300'>두 개의 숫자(10과 5)를 변수에 저장</span>하고, 이 두 숫자의 <span class='font-bold text-yellow-300'>덧셈, 뺄셈, 곱셈, 나눗셈 결과를 각각 계산</span>하여 별도의 변수에 저장해주세요. 마지막으로, 계산된 결과들을 <span class='font-bold text-yellow-300'>지정된 형식에 맞춰 화면에 출력</span>해야 합니다."
          },
          "task_adv": {
            "character": "alex",
            "subtitle": "팀장 과업 지시",
            "title": "미니 프로젝트: 계산기 함수 완성",
            "content": "기본적인 계산기 함수들이 준비되어 있습니다. <span class='font-bold text-yellow-300'>덧셈, 뺄셈, 곱셈, 나눗셈 함수(`add`, `subtract`, `multiply`, `divide`) 각각의 내부 로직을 완성</span>하여, 두 숫자를 입력받아 올바른 계산 결과를 반환하도록 수정해주세요. 함수들을 완성하면 전체 계산 결과가 출력될 것입니다."
          },
          "briefing": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "배운 것들을 조합해봐요!",
            "content": "미니 프로젝트네요! 어렵지 않아요. 1주차에 배운 <span class='font-bold text-teal-300'>변수</span>에 숫자를 저장하고, 이번 주에 배운 <span class='font-bold text-teal-300'>산술 연산자(`+`, `-`, `*`, `/`)</span>를 사용해서 계산하면 돼요. 마지막으로, 결과를 보기 좋게 출력할 때는 <span class='font-bold text-teal-300'>f-string</span>을 사용하면 아주 깔끔하게 만들 수 있을 거예요. 차근차근 해보세요!"
          },
          "briefing_adv": {
            "character": "sena",
            "subtitle": "직속 선임의 팁",
            "title": "함수로 계산하기",
            "content": "함수 안에서 계산하는 것도 어렵지 않아요! 각 함수는 두 개의 숫자(`a`, `b`)를 받으니까, 그 숫자들을 <span class='font-bold text-teal-300'>산술 연산자(`+`, `-`, `*`, `/`)</span>로 계산해서 <span class='font-bold text-teal-300'>`return`</span> 키워드로 돌려주기만 하면 돼요. 예를 들어 `add` 함수는 `return a + b` 가 되겠죠?"
          },
          "lecture": {
            "character": "profKim",
            "title": "교수님의 조언: 지식의 통합",
            "keyTakeaway": "프로그래밍은 배운 지식들을 연결하고 조합하여 실제 문제를 해결하는 과정입니다.",
            "sandboxCode": "# 변수 선언\nradius = 5\npi = 3.14\n\n# 원의 넓이 계산 (반지름 * 반지름 * 원주율)\narea = radius * radius * pi\n\n# 결과 출력\nprint(f\"반지름이 {radius}인 원의 넓이는 {area}입니다.\")",
            "sections": [
              {
                "heading": "핵심 조언",
                "text": "이번 미니 프로젝트는 새로운 개념보다는 지금까지 배운 변수 선언, 기본 자료형(숫자), 산술 연산자, 그리고 문자열 포맷팅(f-string)과 print 함수를 종합적으로 활용하는 연습입니다. 각 단계별로 필요한 도구를 떠올리고 조합하여 문제를 해결하는 개발자의 사고방식을 연습해보세요.",
                "code": null
              }
            ]
          },
          "feedback": {
            "success": {
              "character": "alex",
              "subtitle": "업무 완료 피드백",
              "title": "첫 미니 프로젝트 성공!",
              "content": "<span class='font-bold text-green-300'>모든 계산 결과가 정확하고 출력 형식도 완벽하군요!</span> 배운 내용들을 잘 조합해서 첫 번째 미니 프로젝트를 성공적으로 완료했습니다. 훌륭합니다. 이런 경험들이 쌓여 더 복잡한 문제도 해결할 수 있게 될 겁니다."
            },
            "failure_logical": {
              "character": "sena",
              "subtitle": "디버깅 지원",
              "title": "계산 결과나 출력을 확인해볼까요?",
              "content": "결과가 조금 다르네요. 변수에 숫자를 제대로 저장했는지, 각 연산(`+`, `-`, `*`, `/`)을 올바르게 수행했는지 확인해주세요. 마지막 출력 부분에서 f-string 형식이나 변수 이름에 오타가 있을 수도 있어요."
            },
            "failure_runtime": {
              "character": "sena",
              "subtitle": "디버깅 지원",
              "title": "앗, 코드 실행 오류!",
              "content": "코드를 실행하는 중에 오류가 발생했어요. 변수 이름에 오타가 있거나, 정의되지 않은 변수를 사용하려고 한 건 아닐까요? print 함수 안에 f-string을 사용할 때 문법 오류가 있을 수도 있으니 꼼꼼하게 확인해보세요."
            }
          }
        }
      ]
    }
  ]
}
